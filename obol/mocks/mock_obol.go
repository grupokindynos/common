// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/grupokindynos/common/obol (interfaces: ObolService)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	obol "github.com/grupokindynos/common/obol"
	reflect "reflect"
)

// MockObolService is a mock of ObolService interface
type MockObolService struct {
	ctrl     *gomock.Controller
	recorder *MockObolServiceMockRecorder
}

// MockObolServiceMockRecorder is the mock recorder for MockObolService
type MockObolServiceMockRecorder struct {
	mock *MockObolService
}

// NewMockObolService creates a new mock instance
func NewMockObolService(ctrl *gomock.Controller) *MockObolService {
	mock := &MockObolService{ctrl: ctrl}
	mock.recorder = &MockObolServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockObolService) EXPECT() *MockObolServiceMockRecorder {
	return m.recorder
}

// GetCoin2CoinRates mocks base method
func (m *MockObolService) GetCoin2CoinRates(arg0, arg1 string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoin2CoinRates", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoin2CoinRates indicates an expected call of GetCoin2CoinRates
func (mr *MockObolServiceMockRecorder) GetCoin2CoinRates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoin2CoinRates", reflect.TypeOf((*MockObolService)(nil).GetCoin2CoinRates), arg0, arg1)
}

// GetCoin2CoinRatesWithAmount mocks base method
func (m *MockObolService) GetCoin2CoinRatesWithAmount(arg0, arg1, arg2 string) (obol.CoinToCoinWithAmountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoin2CoinRatesWithAmount", arg0, arg1, arg2)
	ret0, _ := ret[0].(obol.CoinToCoinWithAmountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoin2CoinRatesWithAmount indicates an expected call of GetCoin2CoinRatesWithAmount
func (mr *MockObolServiceMockRecorder) GetCoin2CoinRatesWithAmount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoin2CoinRatesWithAmount", reflect.TypeOf((*MockObolService)(nil).GetCoin2CoinRatesWithAmount), arg0, arg1, arg2)
}

// GetCoin2FIATRate mocks base method
func (m *MockObolService) GetCoin2FIATRate(arg0, arg1 string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoin2FIATRate", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoin2FIATRate indicates an expected call of GetCoin2FIATRate
func (mr *MockObolServiceMockRecorder) GetCoin2FIATRate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoin2FIATRate", reflect.TypeOf((*MockObolService)(nil).GetCoin2FIATRate), arg0, arg1)
}

// GetCoinRates mocks base method
func (m *MockObolService) GetCoinRates(arg0 string) ([]obol.Rate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinRates", arg0)
	ret0, _ := ret[0].([]obol.Rate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoinRates indicates an expected call of GetCoinRates
func (mr *MockObolServiceMockRecorder) GetCoinRates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinRates", reflect.TypeOf((*MockObolService)(nil).GetCoinRates), arg0)
}

// GetCoinRatesV2 mocks base method
func (m *MockObolService) GetCoinRatesV2(arg0 string) (map[string]obol.RateV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinRatesV2", arg0)
	ret0, _ := ret[0].(map[string]obol.RateV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoinRatesV2 indicates an expected call of GetCoinRatesV2
func (mr *MockObolServiceMockRecorder) GetCoinRatesV2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinRatesV2", reflect.TypeOf((*MockObolService)(nil).GetCoinRatesV2), arg0)
}
